import json
import requests

def load_session_and_check():
    """Load session and check slots with proper error handling"""
    
    try:
        # Load session from file
        with open("session.json") as f:
            real_session = json.load(f)
            
        cookies = real_session.get("cookies", [])
        
        # Check if we have cookies
        if not cookies:
            print("⚠️ Warning: No cookies found in session.json")
            print("🔍 Will try without cookies...")
            cookies_str = ""
        else:
            # Convert cookies to string format
            cookies_str = "; ".join([f"{c['name']}={c['value']}" for c in cookies])
            print(f"✅ Loaded {len(cookies)} cookies")
        
        # Create headers
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
            "Accept-Language": "es-ES,es;q=0.5",
            "Accept-Encoding": "gzip, deflate",
            "Connection": "keep-alive",
            "Upgrade-Insecure-Requests": "1",  # ✅ FIXED TYPO
        }
        
        # Only add Cookie header if we have cookies
        if cookies_str:
            headers["Cookie"] = cookies_str
        
        # Test the session
        url = "https://icp.administracionelectronica.gob.es/icpplustiem/index.html?mDes=N"
        
        print(f"🌐 Testing session with URL: {url}")
        print(f"🍪 Cookie header: {'Present' if cookies_str else 'Empty'}")
        
        response = requests.get(url, headers=headers, timeout=15)
        
        print(f"📊 Response status: {response.status_code}")
        print(f"📏 Response length: {len(response.text)} characters")
        
        return response, headers
        
    except FileNotFoundError:
        print("❌ session.json file not found!")
        return None, None
    except json.JSONDecodeError:
        print("❌ Invalid JSON in session.json!")
        return None, None
    except Exception as e:
        print(f"❌ Error: {e}")
        return None, None

# Test the corrected function
response, headers = load_session_and_check()

if response:
    print("✅ Session test completed")
else:
    print("❌ Session test failed")
